service: sls-api

package:
  individually: true

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::GetAtt': [ TodoTable, Arn ]
  environment:
    DEPLOY_STAGE: ${self:provider.stage}
    TODOS_TABLE_NAME: Todo$_{self:provider.stage}

custom:
  todoTable: Todo_${self:provider.stage}

functions:
  hello:
    handler: functions/handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true
          authorizer: aws_iam
  createTask:
    handler: functions/task.createTask
    events:
      - http:
          path: task
          method: post
          cors: true
          authorizer: aws_iam
  deleteTask:
    handler: functions/task.deleteTask
    events:
      - http:
          path: task/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  getTask:
    handler: functions/task.getTask
    events:
      - http:
          path: task/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updateTask:
    handler: functions/task.updateTask
    events:
      - http:
          path: task/{id}
          method: put
          cors: true
          authorizer: aws_iam
  findTasks:
    handler: functions/task.findTasks
    events:
      - http:
          path: tasks
          method: get
          cors: true
          authorizer: aws_iam
  createUser:
    handler: functions/user.createUser
    events:
      - cognitoUserPool:
        pool: sls-api-dev
        trigger: PreAuthentication
  getUser:
    handler: functions/user.getUser
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updateUser:
    handler: functions/user.updateUser
    events:
      - http:
          path: task/{id}
          method: put
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: group
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName: group
            KeyType: HASH
          - AttributeName: groupId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
        - IndexName: group-ownerId-index
          KeySchema:
            - AttributeName: group
              KeyType: HASH
            - AttributeName: ownerId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        TableName: ${self:custom.todoTable}
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AdminCreateUserConfig:
            AllowAdminCreateUserOnly: false
            UnusedAccountValidityDays: 7
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: "Your verification code is {####}."
        EmailVerificationSubject: "Your verification code"
        MfaConfiguration: 'OFF'
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: false
        UserPoolName:
          Ref: AWS::StackName
        Schema:
          - AttributeDataType: "String"
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: "email"
            StringAttributeConstraints:
              MaxLength: "2048"
              MinLength: "0"
            Required: true
          - AttributeDataType: "String"
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: "name"
            StringAttributeConstraints:
              MaxLength: "2048"
              MinLength: "0"
            Required: false
          - AttributeDataType: "String"
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: "custom-attributes"
            StringAttributeConstraints:
              MaxLength: "2048"
              MinLength: "0"
            Required: false
        SmsAuthenticationMessage:  "Your authentication code is {####}."
        SmsVerificationMessage: "Your verification code is {####}."
        UserPoolTags:
          Name: 'Test'
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
          ClientName:
            Ref: AWS::StackName
          GenerateSecret: false
          ExplicitAuthFlows:
            - "ADMIN_NO_SRP_AUTH"
          ReadAttributes:
            - "email"
            - "name"
            - "custom:custom-attributes"
          RefreshTokenValidity: 30
          UserPoolId:
            Ref: UserPool
          WriteAttributes:
            - "email"
            - "name"
            - "custom:custom-attributes"
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName:
          Ref: AWS::StackName
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              Fn::GetAtt: [ "UserPool", "ProviderName" ]
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: IdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'
                - Effect: 'Allow'
                  Action:
                    - 'execute-api:Invoke'
                  Resource:
                    Fn::Join:
                      - ''
                      -
                        - 'arn:aws:execute-api:'
                        - Ref: AWS::Region
                        - ':'
                        - Ref: AWS::AccountId
                        - ':'
                        - Ref: ApiGatewayRestApi
                        - '/*'
  Outputs:
    UserPoolClientId:
      Value:
        Ref: UserPoolClient
    UserPoolId:
      Value:
        Ref: UserPool
    IdentityPoolId:
      Value:
        Ref: IdentityPool
