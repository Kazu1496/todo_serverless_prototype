service: sls-api

package:
  individually: true

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::GetAtt': [ TodoTable, Arn ]
  environment:
    DEPLOY_STAGE: ${self:provider.stage}
    TODOS_TABLE_NAME: Todo$_{self:provider.stage}

custom:
  todoTable: Todo_${self:provider.stage}

functions:
  hello:
    handler: functions/handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true
          authorizer: aws_iam
  createTask:
    handler: functions/task.createTask
    events:
      - http:
          path: task
          method: post
          cors: true
          authorizer: aws_iam
  deleteTask:
    handler: functions/task.deleteTask
    events:
      - http:
          path: task/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  getTask:
    handler: functions/task.getTask
    events:
      - http:
          path: task/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updateTask:
    handler: functions/task.updateTask
    events:
      - http:
          path: task/{id}
          method: put
          cors: true
          authorizer: aws_iam
  findTasks:
    handler: functions/task.findTasks
    events:
      - http:
          path: tasks
          method: get
          cors: true
          authorizer: aws_iam
  createUser:
    handler: functions/user.createUser
    events:
      - cognitoUserPool:
          pool: MyUserPool
          trigger: PreAuthentication
  getUser:
    handler: functions/user.getUser
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updateUser:
    handler: functions/user.updateUser
    events:
      - http:
          path: task/{id}
          method: put
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/cognito.yml)}
  - ${file(resources/dynamodb.yml)}
