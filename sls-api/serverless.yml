service: sls-api

package:
  individually: true

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'arn:aws:dynamodb:ap-northeast-1:*:*'
  environment:
    DEPLOY_STAGE: ${opt:stage, self:custom.defaultStage}
    TODOS_TABLE_NAME: Todo$_{opt:stage, self:custom.defaultStage}

functions:
  hello:
    handler: functions/handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true
  createTask:
    handler: functions/task.createTask
    events:
      - http:
          path: task
          method: post
          cors: true
          authorizer: aws_iam
  deleteTask:
    handler: functions/task.deleteTask
    events:
      - http:
          path: task/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  getTask:
    handler: functions/task.getTask
    events:
      - http:
          path: task/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updateTask:
    handler: functions/task.updateTask
    events:
      - http:
          path: task/{id}
          method: put
          cors: true
          authorizer: aws_iam
  findTasks:
    handler: functions/task.findTasks
    events:
      - http:
          path: tasks
          method: get
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    ResourcesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: group
            AttributeType: S
          -
            AttributeName: groupId
            AttributeType: S
          -
            AttributeName: ownerId
            AttributeType: S
        KeySchema:
          -
            AttributeName: group
            KeyType: HASH
          -
            AttributeName: groupId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: group-ownerId-index
          KeySchema:
            -
              AttributeName: group
              KeyType: HASH
            -
              AttributeName: ownerId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        TableName: Todo_${opt:stage, self:custom.defaultStage}
